package ncu.im3069.app;

import java.sql.*;
import java.time.LocalDateTime;
import org.json.*;

import ncu.im3069.app.Member;

import ncu.im3069.util.DBMgr;

//TODO: Auto-generated Javadoc
/**
* <p>
* The Class MemberHelper<br>
* MemberHelper類別（class）主要管理所有與Member相關與資料庫之方法（method）
* </p>
* 
* @author IPLab
* @version 1.0.0
* @since 1.0.0
*/

public class MemberHelper {
 
 /**
  * 實例化（Instantiates）一個新的（new）MemberHelper物件<br>
  * 採用Singleton不需要透過new
  */
 private MemberHelper() {
     
 }
 
 /** 靜態變數，儲存MemberHelper物件 */
 private static MemberHelper mh;
 
 /** 儲存JDBC資料庫連線 */
 private Connection conn = null;
 
 /** 儲存JDBC預準備之SQL指令 */
 private PreparedStatement pres = null;
 
 /**
  * 靜態方法<br>
  * 實作Singleton（單例模式），僅允許建立一個MemberHelper物件
  *
  * @return the helper 回傳MemberHelper物件
  */
 public static MemberHelper getHelper() {
     /** Singleton檢查是否已經有MemberHelper物件，若無則new一個，若有則直接回傳 */
     if(mh == null) mh = new MemberHelper();
     
     return mh;
 }
 
 /**
  * 透過會員編號（ID）刪除會員
  *
  * @param id 會員編號
  * @return the JSONObject 回傳SQL執行結果
  */
 public JSONObject deleteByID(int id) {
     /** 記錄實際執行之SQL指令 */
     String exexcute_sql = "";
     /** 紀錄程式開始執行時間 */
     long start_time = System.nanoTime();
     /** 紀錄SQL總行數 */
     int row = 0;
     /** 儲存JDBC檢索資料庫後回傳之結果，以 pointer 方式移動到下一筆資料 */
     ResultSet rs = null;
     
     try {
         /** 取得資料庫之連線 */
         conn = DBMgr.getConnection();
         
         /** SQL指令 */
         String sql = "DELETE FROM `sa_database`.`member` WHERE `member_id` = ? LIMIT 1";
         
         /** 將參數回填至SQL指令當中 */
         pres = conn.prepareStatement(sql);
         pres.setInt(1, id);
         /** 執行刪除之SQL指令並記錄影響之行數 */
         row = pres.executeUpdate();

         /** 紀錄真實執行的SQL指令，並印出 **/
         exexcute_sql = pres.toString();
         System.out.println(exexcute_sql);
         
     } catch (SQLException e) {
         /** 印出JDBC SQL指令錯誤 **/
         System.err.format("SQL State: %s\n%s\n%s", e.getErrorCode(), e.getSQLState(), e.getMessage());
     } catch (Exception e) {
         /** 若錯誤則印出錯誤訊息 */
         e.printStackTrace();
     } finally {
         /** 關閉連線並釋放所有資料庫相關之資源 **/
         DBMgr.close(rs, pres, conn);
     }

     /** 紀錄程式結束執行時間 */
     long end_time = System.nanoTime();
     /** 紀錄程式執行時間 */
     long duration = (end_time - start_time);
     
     /** 將SQL指令、花費時間與影響行數，封裝成JSONObject回傳 */
     JSONObject response = new JSONObject();
     response.put("sql", exexcute_sql);
     response.put("row", row);
     response.put("time", duration);

     return response;
 }
 
 /**
  * 取回所有會員資料
  *
  * @return the JSONObject 回傳SQL執行結果與自資料庫取回之所有資料
  */
 public JSONObject getAll() {
     /** 新建一個 Member 物件之 m 變數，用於紀錄每一位查詢回之會員資料 */
     Member m = null;
     /** 用於儲存所有檢索回之會員，以JSONArray方式儲存 */
     JSONArray jsa = new JSONArray();
     /** 記錄實際執行之SQL指令 */
     String exexcute_sql = "";
     /** 紀錄程式開始執行時間 */
     long start_time = System.nanoTime();
     /** 紀錄SQL總行數 */
     int row = 0;
     /** 儲存JDBC檢索資料庫後回傳之結果，以 pointer 方式移動到下一筆資料 */
     ResultSet rs = null;
     
     try {
         /** 取得資料庫之連線 */
         conn = DBMgr.getConnection();
         /** SQL指令 */
         String sql = "SELECT * FROM `sa_database`.`member`";
         
         /** 將參數回填至SQL指令當中，若無則不用只需要執行 prepareStatement */
         pres = conn.prepareStatement(sql);
         /** 執行查詢之SQL指令並記錄其回傳之資料 */
         rs = pres.executeQuery();

         /** 紀錄真實執行的SQL指令，並印出 **/
         exexcute_sql = pres.toString();
         System.out.println(exexcute_sql);
         
         /** 透過 while 迴圈移動pointer，取得每一筆回傳資料 */
         while(rs.next()) {
             /** 每執行一次迴圈表示有一筆資料 */
             row += 1;
             
             /** 將 ResultSet 之資料取出 */
             int id = rs.getInt("member_id");
             String first_name = rs.getString("first_name");
             String last_name = rs.getString("last_name");
             String email = rs.getString("email");
             String password = rs.getString("password");
             String phone = rs.getString("phone");
             String birthday = rs.getString("birthday");
             int auth = rs.getInt("auth");

             
             /** 將每一筆會員資料產生一名新Member物件 */
             m = new Member( email, password, first_name,last_name,phone, birthday, auth);
             /** 取出該名會員之資料並封裝至 JSONsonArray 內 */
             jsa.put(m.getData());
         }

     } catch (SQLException e) {
         /** 印出JDBC SQL指令錯誤 **/
         System.err.format("SQL State: %s\n%s\n%s", e.getErrorCode(), e.getSQLState(), e.getMessage());
     } catch (Exception e) {
         /** 若錯誤則印出錯誤訊息 */
         e.printStackTrace();
     } finally {
         /** 關閉連線並釋放所有資料庫相關之資源 **/
         DBMgr.close(rs, pres, conn);
     }
     
     /** 紀錄程式結束執行時間 */
     long end_time = System.nanoTime();
     /** 紀錄程式執行時間 */
     long duration = (end_time - start_time);
     
     /** 將SQL指令、花費時間、影響行數與所有會員資料之JSONArray，封裝成JSONObject回傳 */
     JSONObject response = new JSONObject();
     response.put("sql", exexcute_sql);
     response.put("row", row);
     response.put("time", duration);
     response.put("data", jsa);

     return response;
 }
 
 /**
  * 透過會員編號（ID）取得會員資料
  *
  * @param member_id 會員編號
  * @return the JSON object 回傳SQL執行結果與該會員編號之會員資料
  */
 public JSONObject getByID(String member_id) {
     /** 新建一個 Member 物件之 m 變數，用於紀錄每一位查詢回之會員資料 */
     Member m = null;
     /** 用於儲存所有檢索回之會員，以JSONArray方式儲存 */
     JSONArray jsa = new JSONArray();
     /** 記錄實際執行之SQL指令 */
     String exexcute_sql = "";
     /** 紀錄程式開始執行時間 */
     long start_time = System.nanoTime();
     /** 紀錄SQL總行數 */
     int row = 0;
     /** 儲存JDBC檢索資料庫後回傳之結果，以 pointer 方式移動到下一筆資料 */
     ResultSet rs = null;
     
     try {
         /** 取得資料庫之連線 */
         conn = DBMgr.getConnection();
         /** SQL指令 */
         String sql = "SELECT * FROM `sa_database`.`member` WHERE `member_id` = ? LIMIT 1";
         
         /** 將參數回填至SQL指令當中 */
         pres = conn.prepareStatement(sql);
         pres.setString(1, member_id);
         /** 執行查詢之SQL指令並記錄其回傳之資料 */
         rs = pres.executeQuery();

         /** 紀錄真實執行的SQL指令，並印出 **/
         exexcute_sql = pres.toString();
         System.out.println(exexcute_sql);
         
         /** 透過 while 迴圈移動pointer，取得每一筆回傳資料 */
         /** 正確來說資料庫只會有一筆該會員編號之資料，因此其實可以不用使用 while 迴圈 */
         while(rs.next()) {
             /** 每執行一次迴圈表示有一筆資料 */
             row += 1;
             
             /** 將 ResultSet 之資料取出 */
             int id = rs.getInt("member_id");
             String first_name = rs.getString("first_name");
             String last_name = rs.getString("last_name");
             String email = rs.getString("email");
             String password = rs.getString("password");
             String phone = rs.getString("phone");
             String birthday = rs.getString("birthday");
             int auth = rs.getInt("auth");
             
             /** 將每一筆會員資料產生一名新Member物件 */
             m = new Member(id, email, password,first_name,last_name,phone, birthday, auth);
             /** 取出該名會員之資料並封裝至 JSONsonArray 內 */
             jsa.put(m.getData());
         }
         
     } catch (SQLException e) {
         /** 印出JDBC SQL指令錯誤 **/
         System.err.format("SQL State: %s\n%s\n%s", e.getErrorCode(), e.getSQLState(), e.getMessage());
     } catch (Exception e) {
         /** 若錯誤則印出錯誤訊息 */
         e.printStackTrace();
     } finally {
         /** 關閉連線並釋放所有資料庫相關之資源 **/
         DBMgr.close(rs, pres, conn);
     }
     
     /** 紀錄程式結束執行時間 */
     long end_time = System.nanoTime();
     /** 紀錄程式執行時間 */
     long duration = (end_time - start_time);
     
     /** 將SQL指令、花費時間、影響行數與所有會員資料之JSONArray，封裝成JSONObject回傳 */
     JSONObject response = new JSONObject();
     response.put("sql", exexcute_sql);
     response.put("row", row);
     response.put("time", duration);
     response.put("data", jsa);

     return response;
 }
 
 /**
  * 取得該名會員之更新時間與所屬之會員組別
  *
  * @param m 一名會員之Member物件
  * @return the JSON object 回傳該名會員之更新時間與所屬組別（以JSONObject進行封裝）
  */
 public JSONObject getLoginTimesStatus(Member m) {
     /** 用於儲存該名會員所檢索之更新時間分鐘數與會員組別之資料 */
     JSONObject jso = new JSONObject();
     /** 儲存JDBC檢索資料庫後回傳之結果，以 pointer 方式移動到下一筆資料 */
     ResultSet rs = null;

     try {
         /** 取得資料庫之連線 */
         conn = DBMgr.getConnection();
         /** SQL指令 */
         String sql = "SELECT * FROM `sa_database`.`member` WHERE `member_id` = ? LIMIT 1";
         
         /** 將參數回填至SQL指令當中 */
         pres = conn.prepareStatement(sql);
         pres.setInt(1, m.getID());
         /** 執行查詢之SQL指令並記錄其回傳之資料 */
         rs = pres.executeQuery();
         
         /** 透過 while 迴圈移動pointer，取得每一筆回傳資料 */
         /** 正確來說資料庫只會有一筆該電子郵件之資料，因此其實可以不用使用 while迴圈 */
         while(rs.next()) {
             /** 將 ResultSet 之資料取出 */
             int login_times = rs.getInt("login_times");
             String status = rs.getString("status");
             /** 將其封裝至JSONObject資料 */
             jso.put("login_times", login_times);
             jso.put("status", status);
         }
         
     } catch (SQLException e) {
         /** 印出JDBC SQL指令錯誤 **/
         System.err.format("SQL State: %s\n%s\n%s", e.getErrorCode(), e.getSQLState(), e.getMessage());
     } catch (Exception e) {
         /** 若錯誤則印出錯誤訊息 */
         e.printStackTrace();
     } finally {
         /** 關閉連線並釋放所有資料庫相關之資源 **/
         DBMgr.close(rs, pres, conn);
     }

     return jso;
 }
 
 /**
  * 檢查該名會員之電子郵件信箱是否重複註冊
  *
  * @param m 一名會員之Member物件
  * @return boolean 若重複註冊回傳False，若該信箱不存在則回傳True
  */
 public boolean checkDuplicate(Member m){
     /** 紀錄SQL總行數，若為「-1」代表資料庫檢索尚未完成 */
     int row = -1;
     /** 儲存JDBC檢索資料庫後回傳之結果，以 pointer 方式移動到下一筆資料 */
     ResultSet rs = null;
     
     try {
         /** 取得資料庫之連線 */
         conn = DBMgr.getConnection();
         /** SQL指令 */
         String sql = "SELECT count(*) FROM `sa_database`.`member` WHERE `email` = ?";
         
         /** 取得所需之參數 */
         String email = m.getEmail();
         
         /** 將參數回填至SQL指令當中 */
         pres = conn.prepareStatement(sql);
         pres.setString(1, email);
         /** 執行查詢之SQL指令並記錄其回傳之資料 */
         rs = pres.executeQuery();

         /** 讓指標移往最後一列，取得目前有幾行在資料庫內 */
         rs.next();
         row = rs.getInt("count(*)");
         System.out.print(row);

     } catch (SQLException e) {
         /** 印出JDBC SQL指令錯誤 **/
         System.err.format("SQL State: %s\n%s\n%s", e.getErrorCode(), e.getSQLState(), e.getMessage());
     } catch (Exception e) {
         /** 若錯誤則印出錯誤訊息 */
         e.printStackTrace();
     } finally {
         /** 關閉連線並釋放所有資料庫相關之資源 **/
         DBMgr.close(rs, pres, conn);
     }
     
     /** 
      * 判斷是否已經有一筆該電子郵件信箱之資料
      * 若無一筆則回傳False，否則回傳True 
      */
     return (row == 0) ? false : true;
 }
 
 /**
  * 建立該名會員至資料庫
  *
  * @param m 一名會員之Member物件
  * @return the JSON object 回傳SQL指令執行之結果
  */
 public JSONObject create(Member m) {
     /** 記錄實際執行之SQL指令 */
     String exexcute_sql = "";
     /** 紀錄程式開始執行時間 */
     long start_time = System.nanoTime();
     /** 紀錄SQL總行數 */
     int row = 0;
     
     try {
         /** 取得資料庫之連線 */
         conn = DBMgr.getConnection();
         /** SQL指令 */
         String sql = "INSERT INTO `sa_database`.`member`(`first_name`, `last_name`,`email`, `password`,`birthday`,`phone`,`auth`, `modify_time`, `create_time`)"
                 + " VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)";
         
         /** 取得所需之參數 */
         String first_name = m.getFirstName();
         String last_name = m.getLastName();
         String email = m.getEmail();
         String password = m.getPassword();
         String birthday= m.getBirthday();
         String phone = m.getPhone();
         int auth = m.getAuth();

         
         /** 將參數回填至SQL指令當中 */
         pres = conn.prepareStatement(sql);
         pres.setString(1, first_name);
         pres.setString(2, last_name);
         pres.setString(3, email);
         pres.setString(4, password);
         pres.setString(5, birthday);
         pres.setString(6, phone);
         pres.setInt(7, auth);
         pres.setTimestamp(8, Timestamp.valueOf(LocalDateTime.now()));
         pres.setTimestamp(9, Timestamp.valueOf(LocalDateTime.now()));

         
         /** 執行新增之SQL指令並記錄影響之行數 */
         row = pres.executeUpdate();
         
         /** 紀錄真實執行的SQL指令，並印出 **/
         exexcute_sql = pres.toString();
         System.out.println(exexcute_sql);

     } catch (SQLException e) {
         /** 印出JDBC SQL指令錯誤 **/
         System.err.format("SQL State: %s\n%s\n%s", e.getErrorCode(), e.getSQLState(), e.getMessage());
     } catch (Exception e) {
         /** 若錯誤則印出錯誤訊息 */
         e.printStackTrace();
     } finally {
         /** 關閉連線並釋放所有資料庫相關之資源 **/
         DBMgr.close(pres, conn);
     }

     /** 紀錄程式結束執行時間 */
     long end_time = System.nanoTime();
     /** 紀錄程式執行時間 */
     long duration = (end_time - start_time);

     /** 將SQL指令、花費時間與影響行數，封裝成JSONObject回傳 */
     JSONObject response = new JSONObject();
     response.put("sql", exexcute_sql);
     response.put("time", duration);
     response.put("row", row);

     return response;
 }
 
 /**
  * 更新一名會員之會員資料
  *
  * @param m 一名會員之Member物件
  * @return the JSONObject 回傳SQL指令執行結果與執行之資料
  */
 public JSONObject update(Member m) {
     /** 紀錄回傳之資料 */
     JSONArray jsa = new JSONArray();
     /** 記錄實際執行之SQL指令 */
     String exexcute_sql = "";
     /** 紀錄程式開始執行時間 */
     long start_time = System.nanoTime();
     /** 紀錄SQL總行數 */
     int row = 0;
     
     try {
         /** 取得資料庫之連線 */
         conn = DBMgr.getConnection();
         /** SQL指令 */
         String sql = "Update `sa_database`.`member` SET `first_name` = ? ,last_name` = ? ,`password` = ? , `birthday` = ? ,`phone` = ? ,`modify_time` = ? WHERE `email` = ?";
         /** 取得所需之參數 */
         String first_name = m.getFirstName();
         String last_name = m.getLastName();
         String email = m.getEmail();
         String password = m.getPassword();
         String birthday= m.getBirthday();
         String phone = m.getPhone();

         
         /** 將參數回填至SQL指令當中 */
         pres = conn.prepareStatement(sql);
         pres.setString(1, first_name);
         pres.setString(2, last_name);
         pres.setString(3, password);
         pres.setString(4, birthday);
         pres.setString(5, phone);
         pres.setTimestamp(6, Timestamp.valueOf(LocalDateTime.now()));
         pres.setString(7, email);
         /** 執行更新之SQL指令並記錄影響之行數 */
         row = pres.executeUpdate();

         /** 紀錄真實執行的SQL指令，並印出 **/
         exexcute_sql = pres.toString();
         System.out.println(exexcute_sql);

     } catch (SQLException e) {
         /** 印出JDBC SQL指令錯誤 **/
         System.err.format("SQL State: %s\n%s\n%s", e.getErrorCode(), e.getSQLState(), e.getMessage());
     } catch (Exception e) {
         /** 若錯誤則印出錯誤訊息 */
         e.printStackTrace();
     } finally {
         /** 關閉連線並釋放所有資料庫相關之資源 **/
         DBMgr.close(pres, conn);
     }
     
     /** 紀錄程式結束執行時間 */
     long end_time = System.nanoTime();
     /** 紀錄程式執行時間 */
     long duration = (end_time - start_time);
     
     /** 將SQL指令、花費時間與影響行數，封裝成JSONObject回傳 */
     JSONObject response = new JSONObject();
     response.put("sql", exexcute_sql);
     response.put("row", row);
     response.put("time", duration);
     response.put("data", jsa);

     return response;
 }
 
 /**
  * 更新會員更新資料之分鐘數
  *
  * @param m 一名會員之Member物件
  */


}
